@page "/personas"

@inject IPersonaService servicio
@inject NavigationManager nav
@inject SweetAlertService sweetAlertService

@if (mostrarModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">

                    <EditForm EditContext="contextoEdicion" OnValidSubmit="GuardarCambios">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label>Nombre Persona:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@persona.Nombre"></InputText>
                                <ValidationMessage For="@(()=>persona.Nombre)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Apellidos:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@persona.Apellidos"></InputText>
                                <ValidationMessage For="@(()=>persona.Apellidos)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Fecha Nacimiento:</label>
                            <div>
                                <InputDate class="form-control" @bind-Value="@persona.FechaNacimiento"></InputDate>
                                <ValidationMessage For="@(()=>persona.FechaNacimiento)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Foto:</label>
                            <div>
                                <InputFile id="foto" OnChange="HandleFileSelected" />
                                <ValidationMessage For="@(()=>persona.Foto)"></ValidationMessage>
                            </div>
                        </div>

                    </EditForm>
                    <EditForm EditContext="contextoEdiciontel" OnValidSubmit="GuardarCambios">
                        <div class="mb-3">
                            <label>Telefono:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@telefono.nrotelefono"></InputText>
                                <ValidationMessage For="@(()=>telefono.nrotelefono)"></ValidationMessage>
                            </div>
                        </div>
                    </EditForm>
                    <EditForm EditContext="contextoEdiciondir" OnValidSubmit="GuardarCambios">
                        <div class="mb-3">
                            <label>Descripción Dirección:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@direccion.Descripcion"></InputText>
                                <ValidationMessage For="@(()=>direccion.Descripcion)"></ValidationMessage>
                            </div>
                        </div>
                    </EditForm>
                    <EditForm EditContext="contextoEdicionuser" OnValidSubmit="GuardarCambios">
                        <div class="mb-3">
                            <label>Nombre Usuario:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@regisuser.UserName"></InputText>
                                <ValidationMessage For="@(()=>regisuser.UserName)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Password:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@regisuser.Password"></InputText>
                                <ValidationMessage For="@(()=>regisuser.Password)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Rol:</label>
                            <div>
                                <select class="form-control" @bind="regisuser.Rol">
                                    <option value="0">Selecciona Rol</option>
                                    <option value="Afiliado">Afiliado</option>
                                    <option value="Admin">Admin</option>
                                    <option value="Secretaria">Secretaria</option>
                                </select>
                                <ValidationMessage For="@(()=>regisuser.Rol)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cerrar</button>
                            <button type="submit" class="btn btn-primary">@modalButtonLabel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<h3>Listar Persona</h3>

<div class="form-group row">
    <button type="button" class="btn btn-primary" @onclick="AbrirModalCrear">
        CREAR
    </button>
</div>

<div class="form-group row">
    <input class="form-control" @bind="@filtroNombre" @oninput="BuscarPorNombre" placeholder="Buscar por Nombre" />
</div>

<div>
    <table class="table">
        <thead>
            <tr>
                <th><strong>Nombre Persona</strong></th>
                <th><strong>Apellidos</strong></th>
                <th><strong>Fecha Nacimiento</strong></th>
                <th><strong>Foto</strong></th>
                <th><strong>Estado</strong></th>
                <th><strong>Acciones</strong></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in PersonaListaPaginada)
            {
                <tr>
                    <td>@item.Nombre</td>
                    <td>@item.Apellidos</td>
                    <td>@item.FechaNacimiento.ToShortDateString()</td>
                    <td>
                        @if (!string.IsNullOrEmpty(item.Foto))
                        {
                            <img src="@($"data:image/png;base64,{item.Foto}")" alt="Foto de @item.Nombre" style="width: 100px; height: 100px;" />
                        }
                        else
                        {
                            <span>No hay foto disponible</span>
                        }
                    </td>
                    <td>@item.Estado</td>
                    <td>
                        @if (item.Estado == "Activo")
                        {
                            <button class="btn btn-primary m-1" @onclick="() => cambiarestado(item.Id, item.Estado)">Desactivar</button>
                            <button class="btn btn-primary m-1" @onclick="() => AbrirModalModificar(item.Id)">Editar</button>
                            <button class="btn btn-danger" @onclick="() => EliminarPersona(item.Id)">Eliminar</button>
                        }
                        @if (item.Estado == "Inactivo")
                        {
                            <button class="btn btn-primary m-1" @onclick="() => cambiarestado(item.Id, item.Estado)">Activar</button>
                            <button class="btn btn-primary m-1" @onclick="() => AbrirModalModificar(item.Id)">Editar</button>
                            <button class="btn btn-danger" @onclick="() => EliminarPersona(item.Id)">Eliminar</button>
                        }

                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


<div>
    <!-- Botones de paginación -->
    <button class="btn btn-primary" disabled="@EsPaginaInicial" @onclick="IrAPaginaAnterior">Anterior</button>
    <span>Página @paginaActual de @TotalPaginas</span>
    <button class="btn btn-primary" disabled="@EsPaginaFinal" @onclick="IrAPaginaSiguiente">Siguiente</button>
</div>

@code {

    private EditContext contextoEdicion;
    private EditContext contextoEdicionper;
    private EditContext contextoEdiciontel;
    private EditContext contextoEdiciondir;
    private EditContext contextoEdicionuser;
    private string modalTitle = "Crear Persona";
    private string modalButtonLabel = "Crear";
    private Persona persona = new Persona();
    private Telefono telefono = new Telefono();
    private Direccion direccion = new Direccion();
    private RegistrarUsuario regisuser = new RegistrarUsuario();
    private PerTelDir registroperteldir = new PerTelDir();
    private bool mostrarModal = false;
    private string filtroNombre;
    private List<Persona> PersonaListaPaginada { get; set; } = new List<Persona>();
    private int paginaActual = 1;
    private int pageSize = 5;
    private string token = "";
    private string rutaBaseImagenes = "../Resources/Images/";


    public List<Persona> PersonaLista { get; set; } = new List<Persona>();

    protected override async Task OnInitializedAsync()
    {
        string userd = await SecureStorage.GetAsync(nameof(Settings.detalleuser));
        if (!string.IsNullOrWhiteSpace(userd))
        {
            var userdt = JsonConvert.DeserializeObject<Detalleuser>(userd);

            var hadler = new JwtSecurityTokenHandler();
            var jsontoken = hadler.ReadToken(userdt.Token) as JwtSecurityToken;
            if (jsontoken.ValidTo < DateTime.UtcNow)
            {
                nav.NavigateTo("/login");
            }
            else
            {
                Settings.detalleuser = userdt;
                token = Settings.detalleuser.Token;
                persona.FechaNacimiento = DateTime.Today;
                contextoEdicion = new EditContext(persona);
                contextoEdiciontel = new EditContext(telefono);
                contextoEdiciondir = new EditContext(direccion);
                contextoEdicionuser = new EditContext(regisuser);
                await CargarPersona();
            }
        }
        else
        {
            nav.NavigateTo("/login");
        }

    }

    private async Task CargarPersona()
    {
        PersonaLista = await servicio.ListarEstado(token);
        await ActualizarListaPaginada();
    }

    private async Task ActualizarListaPaginada()
    {
        int inicio = (paginaActual - 1) * pageSize;
        int fin = inicio + pageSize;
        PersonaListaPaginada = PersonaLista.Skip(inicio).Take(pageSize).ToList();
    }

    private async Task IrAPaginaAnterior()
    {
        if (paginaActual > 1)
        {
            paginaActual--;
            await ActualizarListaPaginada();
        }
    }

    private async Task IrAPaginaSiguiente()
    {
        if (paginaActual < TotalPaginas)
        {
            paginaActual++;
            await ActualizarListaPaginada();
        }
    }


    private bool EsPaginaInicial => paginaActual == 1;
    private bool EsPaginaFinal => paginaActual == TotalPaginas;
    private int TotalPaginas => (int)Math.Ceiling((double)PersonaLista.Count / pageSize);


    public string ObtenerFotoPath(string foto)
    {
        var fot = rutaBaseImagenes + foto;
        return fot;
    }



    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var archivo = e.File;

            if (archivo != null)
            {
                using (var memoryStream = new MemoryStream())
                {
                    await archivo.OpenReadStream().CopyToAsync(memoryStream);
                    var bytes = memoryStream.ToArray();
                    var base64String = Convert.ToBase64String(bytes);

                    // Almacena la imagen en persona.Foto
                    persona.Foto = base64String;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Se produjo una excepción al manejar el archivo: {ex.Message}");

        }

    }


    /*REGISTRAR Y MODIFICAR */
    private async Task GuardarCambios()
    {
        if (persona.Id>0)
        {
            /*MODIFICAR*/
            var result = await sweetAlertService.FireAsync(new SweetAlertOptions
                {
                    Title = "¿Estás seguro?",
                    Text = "¿Deseas modificar este registro de Persona?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí, Modificar",
                    CancelButtonText = "No, cancelar",
                });

            if (result.IsConfirmed)
            {
                var respuesta = await servicio.Modificar(persona, persona.Id, token);
                if (!respuesta)
                {
                    await sweetAlertService.FireAsync("Error", "No se pudo modificar", SweetAlertIcon.Error);
                    return;
                }
                else
                {
                    await sweetAlertService.FireAsync("Modificado", "Se modifico correctamente", SweetAlertIcon.Success);
                }
            }
            CerrarModal();
            await CargarPersona();
        }
        else
        {
            /*REGISTRAR PERSONA*/
            persona.Estado = "Activo";
            regisuser.Estado = "Activo";
            registroperteldir.personas = persona;
            registroperteldir.telefonos = telefono;
            registroperteldir.telefonos.Estado = "Activo";
            registroperteldir.direccions = direccion;
            registroperteldir.direccions.Estado = "Activo";
            registroperteldir.registrarUsuario = regisuser;
            var respuesta = await servicio.InsertarAll(registroperteldir, token);
            if (!respuesta)
            {
                await sweetAlertService.FireAsync("Error", "No se pudo guardar", SweetAlertIcon.Error);
                return;
            }
            else
            {
                await sweetAlertService.FireAsync("Guardado", "Se guardo correctamente", SweetAlertIcon.Success);
            }
        }
        if (!string.IsNullOrEmpty(filtroNombre))
        {
            PersonaLista = await servicio.ListarPorNombre(filtroNombre, token);
            CerrarModal();
            await ActualizarListaPaginada();
        }
        else
        {
            CerrarModal();
            await CargarPersona();
        }
    }


    private async Task EliminarPersona(int RK)
    {
        registroperteldir = await servicio.ObtenerPorId(RK, token);
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "¿Estás seguro?",
                Text = "¿Deseas borrar este registro de Persona?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, borrarlo",
                CancelButtonText = "No, cancelar",
            });

        if (result.IsConfirmed)
        {
            persona.Estado = "Eliminado";
            var respuesta = await servicio.Modificar(persona, persona.Id, token);
            if (!respuesta)
            {
                await sweetAlertService.FireAsync("Error", "No se pudo eliminar", SweetAlertIcon.Error);
                return;
            }
            else
            {
                await sweetAlertService.FireAsync("Eliminado", "Se Elimino Correctamente", SweetAlertIcon.Success);
            }
        }
        if (!string.IsNullOrEmpty(filtroNombre))
        {
            PersonaLista = await servicio.ListarPorNombre(filtroNombre, token);
            await ActualizarListaPaginada();
        }
        else
        {
            await CargarPersona();
        }
    }

    private void AbrirModalCrear()
    {
        persona = new Persona();
        telefono = new Telefono();
        direccion = new Direccion();
        regisuser = new RegistrarUsuario();
        contextoEdicion = new EditContext(persona);
        contextoEdiciontel = new EditContext(telefono);
        contextoEdiciondir = new EditContext(direccion);
        contextoEdicionuser = new EditContext(regisuser);
        modalTitle = "Crear Persona";
        modalButtonLabel = "Crear";
        mostrarModal = true;
    }

    private async Task AbrirModalModificar(int id)
    {
        registroperteldir = await servicio.ObtenerPorId(id, token);

        // Verificar que los objetos no sean nulos
        if (registroperteldir != null && registroperteldir.personas != null && registroperteldir.telefonos != null
            && registroperteldir.direccions != null && registroperteldir.registrarUsuario != null)
        {
            // Asignar los datos al objeto persona y otros objetos relacionados
            persona = registroperteldir.personas;
            telefono = registroperteldir.telefonos;
            direccion = registroperteldir.direccions;
            regisuser = registroperteldir.registrarUsuario;

            // Configurar los contextos de edición
            contextoEdicion = new EditContext(persona);
            contextoEdiciontel = new EditContext(telefono);
            contextoEdiciondir = new EditContext(direccion);
            contextoEdicionuser = new EditContext(regisuser);

            // Establecer el título y etiqueta del botón del modal
            modalTitle = "Modificar Persona";
            modalButtonLabel = "Guardar Cambios";

            // Mostrar el modal
            mostrarModal = true;
        }
        else
        {
            // Manejar la situación cuando los objetos son nulos
            // Puedes mostrar un mensaje de error o realizar alguna otra acción apropiada
        }
    }

    private async Task cambiarestado(int id, string estado)
    {
        if (estado == "Activo")
        {
            registroperteldir = await servicio.ObtenerPorId(id, token);

            var result = await sweetAlertService.FireAsync(new SweetAlertOptions
                {
                    Title = "¿Estás seguro?",
                    Text = "¿Deseas desactivar este registro de Persona?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí, Desactivar",
                    CancelButtonText = "No, cancelar",
                });

            if (result.IsConfirmed)
            {
                persona.Estado = "Inactivo";
                var respuesta = await servicio.Modificar(persona, id, token);
                if (!respuesta)
                {
                    await sweetAlertService.FireAsync("Error", "No se pudo desactivar", SweetAlertIcon.Error);
                    await CargarPersona();
                }
                else
                {
                    await sweetAlertService.FireAsync("Desactivado", "Se Desactivo correctamente", SweetAlertIcon.Success);
                    await CargarPersona();
                }

            }
        }
        else
        {
            registroperteldir = await servicio.ObtenerPorId(id, token);

            var result = await sweetAlertService.FireAsync(new SweetAlertOptions
                {
                    Title = "¿Estás seguro?",
                    Text = "¿Deseas Activar este registro de Persona?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí, Activar",
                    CancelButtonText = "No, cancelar",
                });

            if (result.IsConfirmed)
            {
                persona.Estado = "Activo";
                var respuesta = await servicio.Modificar(persona, id, token);
                if (!respuesta)
                {
                    await sweetAlertService.FireAsync("Error", "No se pudo activar", SweetAlertIcon.Error);
                }
                else
                {
                    await sweetAlertService.FireAsync("Activado", "Se Activo correctamente", SweetAlertIcon.Success);
                }
            }
        }
        if (!string.IsNullOrEmpty(filtroNombre))
        {
            PersonaLista = await servicio.ListarPorNombre(filtroNombre, token);
            await ActualizarListaPaginada();
        }
        else
        {
            await CargarPersona();
        }
    }
    private async Task BuscarPorNombre(ChangeEventArgs e)
    {
        filtroNombre = e.Value.ToString();
        if (!string.IsNullOrEmpty(filtroNombre))
        {
            PersonaLista = await servicio.ListarPorNombre(filtroNombre, token);
            await ActualizarListaPaginada();
        }
        else
        {
            await CargarPersona();
            await ActualizarListaPaginada();
        }

    }
    private void CerrarModal()
    {
        mostrarModal = false;
    }
}
