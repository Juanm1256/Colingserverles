@page "/personatiposocial"

@inject IPersonaTipoSocialService servicio
@inject NavigationManager nav
@inject SweetAlertService sweetAlertService

@if (mostrarModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm EditContext="contextoEdicionTipoSocial" OnValidSubmit="GuardarCambios">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label>Nombre Tipo Social:</label>
                            <div>
                                <input type="text" class="form-control" @oninput="FilterTipoSocial" placeholder="Buscar Tipo Social...">
                                <select class="form-control" @bind="@tiposocial.Id">
                                    @if (filteredTipoSocial.Any())
                                    {
                                        <option value="0">Selecciona Tipo Social</option>
                                        foreach (var per in filteredTipoSocial)
                                        {
                                            <option value="@per.Id">@($"{per.NombreSocial}")</option>
                                        }
                                    }
                                </select>
                                <ValidationMessage For="@(()=>persona.Id)"></ValidationMessage>
                            </div>
                        </div>
                    </EditForm>
                    <EditForm EditContext="contextoEdicionPersona" OnValidSubmit="GuardarCambios">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label>Nombre Persona:</label>
                            <div>
                                <input type="text" class="form-control" @oninput="FilterPersons" placeholder="Buscar persona...">
                                <select class="form-control" @bind="@persona.Id">
                                    @if (filteredPersons.Any())
                                    {
                                        <option value="0">Selecciona Persona</option>
                                        foreach (var per in filteredPersons)
                                        {
                                            <option value="@per.Id">@($"{per.Nombre} {per.Apellidos}")</option>
                                        }
                                    }
                                </select>
                                <ValidationMessage For="@(()=>persona.Id)"></ValidationMessage>
                            </div>
                        </div>
                    </EditForm>
                    <EditForm EditContext="contextoEdicion" OnValidSubmit="GuardarCambios">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label>Descripción:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@personatiposocial.Descripcion"></InputText>
                                <ValidationMessage For="@(()=>personatiposocial.Descripcion)"></ValidationMessage>
                            </div>
                        </div>


                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cerrar</button>
                            <button type="submit" class="btn btn-primary">@modalButtonLabel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<h3>Listar Persona Tipo Social</h3>

<div class="form-group row">
    <button type="button" class="btn btn-primary" @onclick="AbrirModalCrear">
        CREAR
    </button>
</div>

<div class="form-group row">
    <input class="form-control" @bind="@filtroNombre" @oninput="BuscarPorNombre" placeholder="Buscar por Nombre de Persona" />
</div>

<div>
    <table class="table">
        <thead>
            <tr>
                <th><strong>Tipo Social</strong></th>
                <th><strong>Persona</strong></th>
                <th><strong>Descripcion</strong></th>
                <th><strong>Estado</strong></th>
                <th><strong>Acciones</strong></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in PersonaTipoSocialListaPaginada)
            {
                <tr>
                    <td>@(item.Idtiposocialnav.NombreSocial)</td>
                    <td>@(item.IdPersonanav.Nombre + " " + item.IdPersonanav.Apellidos)</td>
                    <td>@item.Descripcion</td>
                    <td>@item.Estado</td>
                    <td>
                        @if (item.Estado == "Activo")
                        {
                            <button class="btn btn-primary m-1" @onclick="() => cambiarestado(item.Id, item.Estado)">Desactivar</button>
                            <button class="btn btn-primary m-1" @onclick="() => AbrirModalModificar(item.Id)">Editar</button>
                            <button class="btn btn-danger" @onclick="() => EliminarPersonaTipoSocial(item.Id)">Eliminar</button>
                        }
                        @if (item.Estado == "Inactivo")
                        {
                            <button class="btn btn-primary m-1" @onclick="() => cambiarestado(item.Id, item.Estado)">Activar</button>
                            <button class="btn btn-primary m-1" @onclick="() => AbrirModalModificar(item.Id)">Editar</button>
                            <button class="btn btn-danger" @onclick="() => EliminarPersonaTipoSocial(item.Id)">Eliminar</button>
                        }

                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div>
    <!-- Botones de paginación -->
    <button class="btn btn-primary" disabled="@EsPaginaInicial" @onclick="IrAPaginaAnterior">Anterior</button>
    <span>Página @paginaActual de @TotalPaginas</span>
    <button class="btn btn-primary" disabled="@EsPaginaFinal" @onclick="IrAPaginaSiguiente">Siguiente</button>
</div>

@code {

    private EditContext contextoEdicion;
    private EditContext contextoEdicionPersona;
    private EditContext contextoEdicionTipoSocial;
    private string modalTitle = "Crear Persona Tipo Social";
    private string modalButtonLabel = "Crear";
    private PersonaTipoSocial personatiposocial = new PersonaTipoSocial();
    private TipoSocial tiposocial = new TipoSocial();
    private Persona persona = new Persona();
    private bool mostrarModal = false;
    private string filtroNombre;
    private List<PersonaTipoSocial> PersonaTipoSocialListaPaginada { get; set; } = new List<PersonaTipoSocial>();
    private List<Persona> allPersons = new List<Persona>();
    private List<Persona> filteredPersons = new List<Persona>();
    private List<TipoSocial> allTipoSocial = new List<TipoSocial>();
    private List<TipoSocial> filteredTipoSocial = new List<TipoSocial>();
    private int paginaActual = 1;
    private int pageSize = 5;
    private string token = "";

    public List<PersonaTipoSocial> PersonaTipoSocialLista { get; set; } = new List<PersonaTipoSocial>();

    protected override async Task OnInitializedAsync()
    {
        string userd = await SecureStorage.GetAsync(nameof(Settings.detalleuser));
        if (!string.IsNullOrWhiteSpace(userd))
        {
            var userdt = JsonConvert.DeserializeObject<Detalleuser>(userd);

            var hadler = new JwtSecurityTokenHandler();
            var jsontoken = hadler.ReadToken(userdt.Token) as JwtSecurityToken;
            if (jsontoken.ValidTo < DateTime.UtcNow)
            {
                nav.NavigateTo("/login");
            }
            else
            {
                Settings.detalleuser = userdt;
                token = Settings.detalleuser.Token;
                contextoEdicion = new EditContext(personatiposocial);
                contextoEdicionPersona = new EditContext(persona);
                contextoEdicionTipoSocial = new EditContext(tiposocial);
                await CargarPersonaTipoSocial();
                await CargarPersonas();
                await CargarTipoSocial();
            }
        }
        else
        {
            nav.NavigateTo("/login");
        }
    }

    private async Task CargarPersonaTipoSocial()
    {

        PersonaTipoSocialLista = await servicio.ListarEstado(token);
        await ActualizarListaPaginada(); 
        await CargarPersonas();
        await CargarTipoSocial();
    }

    private async Task ActualizarListaPaginada()
    {
        int inicio = (paginaActual - 1) * pageSize;
        int fin = inicio + pageSize;
        PersonaTipoSocialListaPaginada = PersonaTipoSocialLista.Skip(inicio).Take(pageSize).ToList();
    }

    private async Task IrAPaginaAnterior()
    {
        if (paginaActual > 1)
        {
            paginaActual--;
            await ActualizarListaPaginada();
        }
    }

    private async Task IrAPaginaSiguiente()
    {
        if (paginaActual < TotalPaginas)
        {
            paginaActual++;
            await ActualizarListaPaginada();
        }
    }


    private bool EsPaginaInicial => paginaActual == 1;
    private bool EsPaginaFinal => paginaActual == TotalPaginas;
    private int TotalPaginas => (int)Math.Ceiling((double)PersonaTipoSocialLista.Count / pageSize);
    private async Task GuardarCambios()
    {


        if (personatiposocial.Id > 0)
        {
            var result = await sweetAlertService.FireAsync(new SweetAlertOptions
                {
                    Title = "¿Estás seguro?",
                    Text = "¿Deseas modificar este registro de Persona Tipo Social?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí, Modificar",
                    CancelButtonText = "No, cancelar",
                });

            if (result.IsConfirmed)
            {
                var respuesta = await servicio.Modificar(personatiposocial, personatiposocial.Id, token);
                if (!respuesta)
                {
                    await sweetAlertService.FireAsync("Error", "No se pudo modificar", SweetAlertIcon.Error);
                    return;
                }
                else
                {
                    await sweetAlertService.FireAsync("Modificado", "Se modifico correctamente", SweetAlertIcon.Success);
                }
            }
            CerrarModal();
            await CargarPersonaTipoSocial();
        }
        else
        {
            personatiposocial.Estado = "Activo";
            personatiposocial.Idtiposocial = tiposocial.Id;
            personatiposocial.Idpersona = persona.Id;
            var respuesta = await servicio.Insertar(personatiposocial, token);
            if (!respuesta)
            {
                await sweetAlertService.FireAsync("Error", "No se pudo guardar", SweetAlertIcon.Error);
                return;
            }
            else
            {
                await sweetAlertService.FireAsync("Guardado", "Se guardo correctamente", SweetAlertIcon.Success);
            }
        }
        if (!string.IsNullOrEmpty(filtroNombre))
        {
            PersonaTipoSocialLista = await servicio.ListarPorNombre(filtroNombre, token);
            CerrarModal();
            await ActualizarListaPaginada();
        }
        else
        {
            CerrarModal();
            await CargarPersonaTipoSocial();
        }
    }


    private async Task EliminarPersonaTipoSocial(int RK)
    {
        personatiposocial = await servicio.ObtenerPorId(RK, token);
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "¿Estás seguro?",
                Text = "¿Deseas borrar este registro de Persona Tipo Social?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, borrarlo",
                CancelButtonText = "No, cancelar",
            });

        if (result.IsConfirmed)
        {
            personatiposocial.Estado = "Eliminado";
            var respuesta = await servicio.Modificar(personatiposocial, personatiposocial.Id, token);
            if (!respuesta)
            {
                await sweetAlertService.FireAsync("Error", "No se pudo eliminar", SweetAlertIcon.Error);
                return;
            }
            else
            {
                await sweetAlertService.FireAsync("Eliminado", "Se Elimino Correctamente", SweetAlertIcon.Success);
            }
        }
        if (!string.IsNullOrEmpty(filtroNombre))
        {
            PersonaTipoSocialLista = await servicio.ListarPorNombre(filtroNombre, token);
            await ActualizarListaPaginada();
        }
        else
        {
            await CargarPersonaTipoSocial();
        }
    }

    private void AbrirModalCrear()
    {
        personatiposocial = new PersonaTipoSocial();
        tiposocial = new TipoSocial();
        persona = new Persona();
        contextoEdicion = new EditContext(personatiposocial);
        contextoEdicionTipoSocial = new EditContext(tiposocial);
        contextoEdicionPersona = new EditContext(persona);
        modalTitle = "Crear Persona Tipo Social";
        modalButtonLabel = "Crear";
        mostrarModal = true;
    }

    private async Task AbrirModalModificar(int id)
    {

        personatiposocial = await servicio.ObtenerPorId(id, token);
        contextoEdicion = new EditContext(personatiposocial);
        modalTitle = "Modificar Persona Tipo Social";
        modalButtonLabel = "Guardar Cambios";
        mostrarModal = true;
    }

    private async Task cambiarestado(int id, string estado)
    {

        if (estado == "Activo")
        {
            personatiposocial = await servicio.ObtenerPorId(id, token);

            var result = await sweetAlertService.FireAsync(new SweetAlertOptions
                {
                    Title = "¿Estás seguro?",
                    Text = "¿Deseas desactivar este registro de Persona Tipo Social?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí, Desactivar",
                    CancelButtonText = "No, cancelar",
                });

            if (result.IsConfirmed)
            {
                personatiposocial.Estado = "Inactivo";
                var respuesta = await servicio.Modificar(personatiposocial, id, token);
                if (!respuesta)
                {
                    await sweetAlertService.FireAsync("Error", "No se pudo desactivar", SweetAlertIcon.Error);
                    await CargarPersonaTipoSocial();
                }
                else
                {
                    await sweetAlertService.FireAsync("Desactivado", "Se Desactivo correctamente", SweetAlertIcon.Success);
                    await CargarPersonaTipoSocial();
                }

            }
        }
        else
        {
            personatiposocial = await servicio.ObtenerPorId(id, token);

            var result = await sweetAlertService.FireAsync(new SweetAlertOptions
                {
                    Title = "¿Estás seguro?",
                    Text = "¿Deseas Activar este registro de Persona Tipo Social?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí, Activar",
                    CancelButtonText = "No, cancelar",
                });

            if (result.IsConfirmed)
            {
                personatiposocial.Estado = "Activo";
                var respuesta = await servicio.Modificar(personatiposocial, id, token);
                if (!respuesta)
                {
                    await sweetAlertService.FireAsync("Error", "No se pudo activar", SweetAlertIcon.Error);
                }
                else
                {
                    await sweetAlertService.FireAsync("Activado", "Se Activo correctamente", SweetAlertIcon.Success);
                }
            }
        }
        if (!string.IsNullOrEmpty(filtroNombre))
        {
            PersonaTipoSocialLista = await servicio.ListarPorNombre(filtroNombre, token);
            await ActualizarListaPaginada();
        }
        else
        {
            await CargarPersonaTipoSocial();
        }
    }
    private async Task BuscarPorNombre(ChangeEventArgs e)
    {

        filtroNombre = e.Value.ToString();
        if (!string.IsNullOrEmpty(filtroNombre))
        {
            PersonaTipoSocialLista = await servicio.ListarPorNombre(filtroNombre, token);
            await ActualizarListaPaginada();
        }
        else
        {
            await CargarPersonaTipoSocial();
            await ActualizarListaPaginada();
        }

    }

    private void FilterPersons(ChangeEventArgs e)
    {
        string filter = e.Value.ToString().ToLower();
        filteredPersons = allPersons
            .Where(p => (p.Nombre + " " + p.Apellidos).ToLower().Contains(filter))
            .ToList();
    }

    private async Task CargarPersonas()
    {
        allPersons = await servicio.ListarPersona(token);
        filteredPersons = allPersons.ToList();
    }
    private void FilterTipoSocial(ChangeEventArgs e)
    {
        string filter = e.Value.ToString().ToLower();
        filteredTipoSocial = allTipoSocial
            .Where(p => (p.NombreSocial).ToLower().Contains(filter))
            .ToList();
    }

    private async Task CargarTipoSocial()
    {
        allTipoSocial = await servicio.ListarTipoSocial(token);
        filteredTipoSocial = allTipoSocial.ToList();
    }

    private void CerrarModal()
    {
        filtroNombre = "";
        mostrarModal = false;
    }
}
