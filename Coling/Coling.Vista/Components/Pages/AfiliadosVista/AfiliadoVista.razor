@page "/afiliados"

@inject IAfiliadoService servicio
@inject NavigationManager nav
@inject SweetAlertService sweetAlertService

@if (mostrarModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm EditContext="contextoEdicion" OnValidSubmit="GuardarCambios">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label>Nombre Afiliado:</label>
                            <div>
                                <InputNumber class="form-control" @bind-Value="@afiliado.Idpersona"></InputNumber>
                                <ValidationMessage For="@(()=>afiliado.Idpersona)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Fecha Nacimiento:</label>
                            <div>
                                <InputDate class="form-control" @bind-Value="@afiliado.fechaafiliacion"></InputDate>
                                <ValidationMessage For="@(()=>afiliado.fechaafiliacion)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Apellidos:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@afiliado.CodigoAfiliado"></InputText>
                                <ValidationMessage For="@(()=>afiliado.CodigoAfiliado)"></ValidationMessage>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label>Foto:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@afiliado.Nrotituloprovisional"></InputText>
                                <ValidationMessage For="@(()=>afiliado.Nrotituloprovisional)"></ValidationMessage>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cerrar</button>
                            <button type="submit" class="btn btn-primary">@modalButtonLabel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<h3>Listar Afiliado</h3>

<div class="form-group row">
    <button type="button" class="btn btn-primary" @onclick="AbrirModalCrear">
        CREAR
    </button>
</div>

<div class="form-group row">
    <input class="form-control" @bind="@filtroNombre" @oninput="BuscarPorNombre" placeholder="Buscar por nombre de Institucion" />
</div>

<div class="container">
    <table class="table">
        <thead>
            <tr>
                <th><strong>Nombre Persona</strong></th>
                <th><strong>Fecha Afiliacion</strong></th>
                <th><strong>Codigo Afiliado</strong></th>
                <th><strong>Nro Titulo Provicional</strong></th>
                <th><strong>Estado</strong></th>
                <th><strong>Acciones</strong></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in AfiliadoListaPaginada)
            {
                <tr>
                    <td>@item.Idpersona</td>
                    <td>@item.fechaafiliacion</td>
                    <td>@item.CodigoAfiliado</td>
                    <td>@item.Nrotituloprovisional</td>
                    <td>@item.Estado</td>
                    <td>
                        @if (item.Estado == "Activo")
                        {
                            <button class="btn btn-primary m-1" @onclick="() => cambiarestado(item.Id, item.Estado)">Desactivar</button>
                            <button class="btn btn-primary m-1" @onclick="() => AbrirModalModificar(item.Id)">Editar</button>
                            <button class="btn btn-danger" @onclick="() => EliminarAfiliado(item.Id)">Eliminar</button>
                        }
                        @if (item.Estado == "Inactivo")
                        {
                            <button class="btn btn-primary m-1" @onclick="() => cambiarestado(item.Id, item.Estado)">Activar</button>
                            <button class="btn btn-primary m-1" @onclick="() => AbrirModalModificar(item.Id)">Editar</button>
                            <button class="btn btn-danger" @onclick="() => EliminarAfiliado(item.Id)">Eliminar</button>
                        }

                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div>
    <!-- Botones de paginación -->
    <button class="btn btn-primary" disabled="@EsPaginaInicial" @onclick="IrAPaginaAnterior">Anterior</button>
    <span>Página @paginaActual de @TotalPaginas</span>
    <button class="btn btn-primary" disabled="@EsPaginaFinal" @onclick="IrAPaginaSiguiente">Siguiente</button>
</div>

@code {

    private EditContext contextoEdicion;
    private string modalTitle = "Crear Afiliado";
    private string modalButtonLabel = "Crear";
    private Afiliado afiliado = new Afiliado();
    private bool mostrarModal = false;
    private string filtroNombre;
    private List<Afiliado> AfiliadoListaPaginada { get; set; } = new List<Afiliado>();
    private int paginaActual = 1;
    private int pageSize = 5;
    private string token="";

    public List<Afiliado> AfiliadoLista { get; set; } = new List<Afiliado>();

    protected override async Task OnInitializedAsync()
    {
        string userd = await SecureStorage.GetAsync(nameof(Settings.detalleuser));
        if (!string.IsNullOrWhiteSpace(userd))
        {
            var userdt = JsonConvert.DeserializeObject<Detalleuser>(userd);

            var hadler = new JwtSecurityTokenHandler();
            var jsontoken = hadler.ReadToken(userdt.Token) as JwtSecurityToken;
            if (jsontoken.ValidTo < DateTime.UtcNow)
            {
                nav.NavigateTo("/login");
            }
            else
            {
                Settings.detalleuser = userdt;
                token = Settings.detalleuser.Token;
                contextoEdicion = new EditContext(afiliado);
                await CargarAfiliado();
            }
        }
        else
        {
            nav.NavigateTo("/login");
        }
        
    }

    async Task CargarAfiliado()
    {
       
        AfiliadoLista = await servicio.ListarEstado(token);
        await ActualizarListaPaginada();
    }

    private async Task ActualizarListaPaginada()
    {
        int inicio = (paginaActual - 1) * pageSize;
        int fin = inicio + pageSize;
        AfiliadoListaPaginada = AfiliadoLista.Skip(inicio).Take(pageSize).ToList();
    }

    private async Task IrAPaginaAnterior()
    {
        if (paginaActual > 1)
        {
            paginaActual--;
            await ActualizarListaPaginada();
        }
    }

    private async Task IrAPaginaSiguiente()
    {
        if (paginaActual < TotalPaginas)
        {
            paginaActual++;
            await ActualizarListaPaginada();
        }
    }


    private bool EsPaginaInicial => paginaActual == 1;
    private bool EsPaginaFinal => paginaActual == TotalPaginas;
    private int TotalPaginas => (int)Math.Ceiling((double)AfiliadoLista.Count / pageSize);
    private async Task GuardarCambios()
    {
        

        if (afiliado.Id > 0)
        {
            var result = await sweetAlertService.FireAsync(new SweetAlertOptions
                {
                    Title = "¿Estás seguro?",
                    Text = "¿Deseas modificar este registro de Afiliado?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí, Modificar",
                    CancelButtonText = "No, cancelar",
                });

            if (result.IsConfirmed)
            {
                var respuesta = await servicio.Modificar(afiliado, afiliado.Id, token);
                if (!respuesta)
                {
                    await sweetAlertService.FireAsync("Error", "No se pudo modificar", SweetAlertIcon.Error);
                    return;
                }
                else
                {
                    await sweetAlertService.FireAsync("Modificado", "Se modifico correctamente", SweetAlertIcon.Success);
                }
            }
            CerrarModal();
            await CargarAfiliado();
        }
        else
        {
            afiliado.Estado = "Activo";
            var respuesta = await servicio.Insertar(afiliado, token);
            if (!respuesta)
            {
                await sweetAlertService.FireAsync("Error", "No se pudo guardar", SweetAlertIcon.Error);
                return;
            }
            else
            {
                await sweetAlertService.FireAsync("Guardado", "Se guardo correctamente", SweetAlertIcon.Success);
            }
        }
        if (!string.IsNullOrEmpty(filtroNombre))
        {
            AfiliadoLista = await servicio.ListarPorNombre(filtroNombre, token);
            CerrarModal();
            await ActualizarListaPaginada();
        }
        else
        {
            CerrarModal();
            await CargarAfiliado();
        }
    }


    private async Task EliminarAfiliado(int RK)
    {
        
        afiliado = await servicio.ObtenerPorId(RK, token);
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "¿Estás seguro?",
                Text = "¿Deseas borrar este registro de Afiliado?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, borrarlo",
                CancelButtonText = "No, cancelar",
            });

        if (result.IsConfirmed)
        {
            afiliado.Estado = "Eliminado";
            var respuesta = await servicio.Modificar(afiliado, afiliado.Id, token);
            if (!respuesta)
            {
                await sweetAlertService.FireAsync("Error", "No se pudo eliminar", SweetAlertIcon.Error);
                return;
            }
            else
            {
                await sweetAlertService.FireAsync("Eliminado", "Se Elimino Correctamente", SweetAlertIcon.Success);
            }
        }
        if (!string.IsNullOrEmpty(filtroNombre))
        {
            AfiliadoLista = await servicio.ListarPorNombre(filtroNombre, token);
            await ActualizarListaPaginada();
        }
        else
        {
            await CargarAfiliado();
        }
    }

    private void AbrirModalCrear()
    {
        afiliado = new Afiliado();
        contextoEdicion = new EditContext(afiliado);
        modalTitle = "Crear Afiliado";
        modalButtonLabel = "Crear";
        mostrarModal = true;
    }

    private async Task AbrirModalModificar(int id)
    {
        
        afiliado = await servicio.ObtenerPorId(id, token);
        contextoEdicion = new EditContext(afiliado);
        modalTitle = "Modificar Afiliado";
        modalButtonLabel = "Guardar Cambios";
        mostrarModal = true;
    }

    private async Task cambiarestado(int id, string estado)
    {
        
        if (estado == "Activo")
        {
            afiliado = await servicio.ObtenerPorId(id, token);

            var result = await sweetAlertService.FireAsync(new SweetAlertOptions
                {
                    Title = "¿Estás seguro?",
                    Text = "¿Deseas desactivar este registro de Afiliado?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí, Desactivar",
                    CancelButtonText = "No, cancelar",
                });

            if (result.IsConfirmed)
            {
                afiliado.Estado = "Inactivo";
                var respuesta = await servicio.Modificar(afiliado, id, token);
                if (!respuesta)
                {
                    await sweetAlertService.FireAsync("Error", "No se pudo desactivar", SweetAlertIcon.Error);
                    await CargarAfiliado();
                }
                else
                {
                    await sweetAlertService.FireAsync("Desactivado", "Se Desactivo correctamente", SweetAlertIcon.Success);
                    await CargarAfiliado();
                }

            }
        }
        else
        {
            afiliado = await servicio.ObtenerPorId(id, token);

            var result = await sweetAlertService.FireAsync(new SweetAlertOptions
                {
                    Title = "¿Estás seguro?",
                    Text = "¿Deseas Activar este registro de Afiliado?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí, Activar",
                    CancelButtonText = "No, cancelar",
                });

            if (result.IsConfirmed)
            {
                afiliado.Estado = "Activo";
                var respuesta = await servicio.Modificar(afiliado, id, token);
                if (!respuesta)
                {
                    await sweetAlertService.FireAsync("Error", "No se pudo activar", SweetAlertIcon.Error);
                }
                else
                {
                    await sweetAlertService.FireAsync("Activado", "Se Activo correctamente", SweetAlertIcon.Success);
                }
            }
        }
        if (!string.IsNullOrEmpty(filtroNombre))
        {
            AfiliadoLista = await servicio.ListarPorNombre(filtroNombre, token);
            await ActualizarListaPaginada();
        }
        else
        {
            await CargarAfiliado();
        }
    }
    private async Task BuscarPorNombre(ChangeEventArgs e)
    {
        
        filtroNombre = e.Value.ToString();
        if (!string.IsNullOrEmpty(filtroNombre))
        {
            AfiliadoLista = await servicio.ListarPorNombre(filtroNombre, token);
            await ActualizarListaPaginada();
        }
        else
        {
            await CargarAfiliado();
            await ActualizarListaPaginada();
        }

    }
    private void CerrarModal()
    {
        mostrarModal = false;
    }
}
