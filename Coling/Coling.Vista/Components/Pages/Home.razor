@page "/login"
@inject IAppService service
@inject NavigationManager nav;



<div id="contenedor">
    <div id="contenedorcentrado">
        <div id="login">
           <EditForm Model="@loginmodel" OnValidSubmit="Submit">
                <DataAnnotationsValidator />
                <label for="usuario">Usuario</label>
                <input id="usuario" type="text" name="usuario" @bind-value="loginmodel.UserName" placeholder="Usuario">
                <ValidationMessage For="@(()=> loginmodel.Password)" />
                <label for="password">Contraseña</label>
                <input id="password" type="password" @bind-value="loginmodel.Password" placeholder="Contraseña" name="password">
                <ValidationMessage For="@(()=> loginmodel.Password)" />
                <button type="submit" title="Ingresar" name="Ingresar">Login</button>
            </EditForm>

        </div>
        <div id="derecho">
            <div class="titulo">
                Bienvenido
            </div>
            <hr>
        </div>
    </div>
</div>












@code {
    LoginModel loginmodel = new();

    private async void Submit()
    {
        loginmodel.RefrescarToken = true;
        var response = await service.AuthenticateUser(loginmodel);
        if (!string.IsNullOrWhiteSpace(response))
        {
            var hadler = new JwtSecurityTokenHandler();
            var jsontoken = hadler.ReadToken(response) as JwtSecurityToken;
            string name = jsontoken.Claims.FirstOrDefault(f => f.Type == "usuario")?.Value;
            string rol = jsontoken.Claims.FirstOrDefault(f => f.Type == "rol").Value;
            string estado = jsontoken.Claims.FirstOrDefault(f => f.Type == "estado").Value;

            var detalleususuario = new Detalleuser
                {
                    usuario = name,
                    rol = rol,
                    Token = response,
                    Estado = estado
                };
            string userbasic = JsonConvert.SerializeObject(detalleususuario);

            await SecureStorage.SetAsync(nameof(Settings.detalleuser), userbasic);
            Settings.detalleuser = detalleususuario;
            @if (Settings.detalleuser.Estado == "Activo")
            {
                nav.NavigateTo("/dashboard");
            }else
            {
                await App.Current.MainPage.DisplayAlert("Opps", "Invalid user", "Ok");
                nav.NavigateTo("/login");
            }
            
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Opps", "Invalid user", "Ok");
        }
    }
}