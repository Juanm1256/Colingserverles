@page "/instituciones"

@inject IInstitucionService servicioinstitucion
@inject NavigationManager nav
@inject SweetAlertService sweetAlertService

@if (mostrarModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm EditContext="contextoEdicion" OnValidSubmit="GuardarCambios">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label>Nombre:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@institucion.Nombre"></InputText>
                                <ValidationMessage For="@(()=>institucion.Nombre)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Tipo:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@institucion.Tipo"></InputText>
                                <ValidationMessage For="@(()=>institucion.Tipo)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Dirección:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@institucion.Direccion"></InputText>
                                <ValidationMessage For="@(()=>institucion.Direccion)"></ValidationMessage>
                            </div>
                        </div>
                    </EditForm>
                    <EditForm EditContext="contextoEdicionuser" OnValidSubmit="GuardarCambios">
                        <div class="mb-3">
                            <label>Nombre Usuario:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@regisuser.UserName"></InputText>
                                <ValidationMessage For="@(()=>regisuser.UserName)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Password:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@regisuser.Password"></InputText>
                                <ValidationMessage For="@(()=>regisuser.Password)"></ValidationMessage>
                            </div>
                        </div>


                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cerrar</button>
                            <button type="submit" class="btn btn-primary">@modalButtonLabel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<h3>Listar Instituciones</h3>

<div class="form-group row">
    <button type="button" class="btn btn-primary" @onclick="AbrirModalCrear">
        CREAR
    </button>
</div>

<div class="form-group row">
    <input class="form-control" @bind="@filtroNombre" @oninput="BuscarPorNombre" placeholder="Buscar por nombre" />
</div>

<div>
    <table class="table">
        <thead>
            <tr>
                <th><strong>Nombre Institución</strong></th>
                <th><strong>Dirección</strong></th>
                <th><strong>Estado</strong></th>
                <th><strong>Acciones</strong></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in InstitucionListaPaginada)
            {
                <tr>
                    <td>@item.Nombre</td>
                    <td>@item.Direccion</td>
                    <td>@item.Estado</td>
                    <td>
                        @if (item.Estado == "Activo")
                        {
                            <button class="btn btn-primary m-1" @onclick="() => cambiarestado(item.RowKey, item.Estado)">Desactivar</button>
                            <button class="btn btn-primary m-1" @onclick="() => AbrirModalModificar(item.RowKey)">Editar</button>
                            <button class="btn btn-danger" @onclick="() => EliminarInstitucion(item.RowKey)">Eliminar</button>
                        }
                        @if (item.Estado == "Inactivo")
                        {
                            <button class="btn btn-primary m-1" @onclick="() => cambiarestado(item.RowKey, item.Estado)">Activar</button>
                            <button class="btn btn-primary m-1" @onclick="() => AbrirModalModificar(item.RowKey)">Editar</button>
                            <button class="btn btn-danger" @onclick="() => EliminarInstitucion(item.RowKey)">Eliminar</button>
                        }

                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div>
    <!-- Botones de paginación -->
    <button class="btn btn-primary" disabled="@EsPaginaInicial" @onclick="IrAPaginaAnterior">Anterior</button>
    <span>Página @paginaActual de @TotalPaginas</span>
    <button class="btn btn-primary" disabled="@EsPaginaFinal" @onclick="IrAPaginaSiguiente">Siguiente</button>
</div>

@code {

    private EditContext contextoEdicion;
    private EditContext contextoEdicionuser;
    private string modalTitle = "Crear Institución";
    private string modalButtonLabel = "Crear";
    private Institucion institucion = new Institucion();
    private RegistrarUsuario regisuser= new RegistrarUsuario();
    private InstituUser instituUser= new InstituUser();
    private bool mostrarModal = false;
    private string filtroNombre; 
    private List<Institucion> InstitucionListaPaginada { get; set; } = new List<Institucion>();
    private int paginaActual = 1;
    private int pageSize = 5;
    private string token = "";

    public List<Institucion> InstitucionLista { get; set; } = new List<Institucion>();

    protected override async Task OnInitializedAsync()
    {
        string userd = await SecureStorage.GetAsync(nameof(Settings.detalleuser));
        if (!string.IsNullOrWhiteSpace(userd))
        {
            var userdt = JsonConvert.DeserializeObject<Detalleuser>(userd);

            var hadler = new JwtSecurityTokenHandler();
            var jsontoken = hadler.ReadToken(userdt.Token) as JwtSecurityToken;
            if (jsontoken.ValidTo < DateTime.UtcNow)
            {
                nav.NavigateTo("/login");
            }
            else
            {
                Settings.detalleuser = userdt;
                token = Settings.detalleuser.Token;
                contextoEdicion = new EditContext(institucion);
                contextoEdicionuser = new EditContext(regisuser);
                await CargarInstituciones();
            }
        }
        else
        {
            nav.NavigateTo("/login");
        }
    }

    async Task CargarInstituciones()
    {

        InstitucionLista = await servicioinstitucion.ListarEstado(token);
        await ActualizarListaPaginada();
    }

    private async Task ActualizarListaPaginada()
    {
        int inicio = (paginaActual - 1) * pageSize;
        int fin = inicio + pageSize;
        InstitucionListaPaginada = InstitucionLista.Skip(inicio).Take(pageSize).ToList();
    }

    private async Task IrAPaginaAnterior()
    {
        if (paginaActual > 1)
        {
            paginaActual--;
            await ActualizarListaPaginada();
        }
    }

    private async Task IrAPaginaSiguiente()
    {
        if (paginaActual < TotalPaginas)
        {
            paginaActual++;
            await ActualizarListaPaginada();
        }
    }


    private bool EsPaginaInicial => paginaActual == 1;
    private bool EsPaginaFinal => paginaActual == TotalPaginas;
    private int TotalPaginas => (int)Math.Ceiling((double)InstitucionLista.Count / pageSize);
    private async Task GuardarCambios()
    {


        if (!string.IsNullOrEmpty(institucion.RowKey))
        {
            var result = await sweetAlertService.FireAsync(new SweetAlertOptions
                {
                    Title = "¿Estás seguro?",
                    Text = "¿Deseas modificar este registro de institución?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí, Modificar",
                    CancelButtonText = "No, cancelar",
                });

            if (result.IsConfirmed)
            {
                var respuesta = await servicioinstitucion.ModificarInstitucion(institucion, token);
                if (!respuesta)
                {
                    await sweetAlertService.FireAsync("Error", "No se pudo modificar", SweetAlertIcon.Error);
                    return;
                }
                else
                {
                    await sweetAlertService.FireAsync("Modificado", "Se modifico correctamente", SweetAlertIcon.Success);
                }
            }
            CerrarModal();
            await CargarInstituciones();
        }
        else
        {
            institucion.PartitionKey = "Educacion";
            institucion.Estado = "Activo";
            instituUser.institucion = institucion;
            instituUser.registrarUsuario = regisuser;
            var respuesta = await servicioinstitucion.InsertarInstitucion(instituUser, token);
            if (!respuesta)
            {
                await sweetAlertService.FireAsync("Error", "No se pudo guardar", SweetAlertIcon.Error);
                return;
            }
            else
            {
                await sweetAlertService.FireAsync("Guardado", "Se guardo correctamente", SweetAlertIcon.Success);
            }
        }
        if (!string.IsNullOrEmpty(filtroNombre))
        {
            InstitucionLista = await servicioinstitucion.ListarPorNombre(filtroNombre, token);
            CerrarModal();
            await ActualizarListaPaginada();
        }
        else
        {
            CerrarModal();
            await CargarInstituciones();
        }
    }


    private async Task EliminarInstitucion(string RK)
    {
        
        institucion = await servicioinstitucion.ObtenerInstitucionPorId(RK, token);
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "¿Estás seguro?",
                Text = "¿Deseas borrar este registro de institución?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, borrarlo",
                CancelButtonText = "No, cancelar",
            });

        if (result.IsConfirmed)
        {
            institucion.Estado = "Eliminado";
            var respuesta = await servicioinstitucion.ModificarInstitucion(institucion, token);
            if (!respuesta)
            {
                await sweetAlertService.FireAsync("Error", "No se pudo eliminar", SweetAlertIcon.Error);
                return;
            }
            else
            {
                await sweetAlertService.FireAsync("Eliminado", "Se Elimino Correctamente", SweetAlertIcon.Success);
            }
        }
        if (!string.IsNullOrEmpty(filtroNombre))
        {
            InstitucionLista = await servicioinstitucion.ListarPorNombre(filtroNombre, token);
            await ActualizarListaPaginada();
        }
        else
        {
            await CargarInstituciones();
        }
    }

    private void AbrirModalCrear()
    {
        institucion = new Institucion();
        regisuser = new RegistrarUsuario();
        contextoEdicion = new EditContext(institucion);
        contextoEdicionuser = new EditContext(regisuser);
        modalTitle = "Crear Institución";
        modalButtonLabel = "Crear";
        mostrarModal = true;
    }

    private async Task AbrirModalModificar(string rowKey)
    {
        
        institucion = await servicioinstitucion.ObtenerInstitucionPorId(rowKey, token);
        regisuser = await servicioinstitucion.ObteneruserPorId(rowKey, token);
        contextoEdicion = new EditContext(institucion);
        contextoEdicionuser = new EditContext(regisuser);
        modalTitle = "Modificar Institución";
        modalButtonLabel = "Guardar Cambios";
        mostrarModal = true;
    }

    private async Task cambiarestado(string rowKey, string estado)
    {
        
        if (estado == "Activo")
        {
            institucion = await servicioinstitucion.ObtenerInstitucionPorId(rowKey, token);

            var result = await sweetAlertService.FireAsync(new SweetAlertOptions
                {
                    Title = "¿Estás seguro?",
                    Text = "¿Deseas desactivar este registro de institución?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí, Desactivar",
                    CancelButtonText = "No, cancelar",
                });

            if (result.IsConfirmed)
            {
                institucion.Estado = "Inactivo";
                var respuesta = await servicioinstitucion.ModificarInstitucion(institucion, token);
                if (!respuesta)
                {
                    await sweetAlertService.FireAsync("Error", "No se pudo desactivar", SweetAlertIcon.Error);
                    await CargarInstituciones();
                }
                else
                {
                    await sweetAlertService.FireAsync("Desactivado", "Se Desactivo correctamente", SweetAlertIcon.Success);
                    await CargarInstituciones();
                }

            }
        }else
        {
            institucion = await servicioinstitucion.ObtenerInstitucionPorId(rowKey, token);

            var result = await sweetAlertService.FireAsync(new SweetAlertOptions
                {
                    Title = "¿Estás seguro?",
                    Text = "¿Deseas Activar este registro de institución?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí, Activar",
                    CancelButtonText = "No, cancelar",
                });

            if (result.IsConfirmed)
            {
                institucion.Estado = "Activo";
                var respuesta = await servicioinstitucion.ModificarInstitucion(institucion, token);
                if (!respuesta)
                {
                    await sweetAlertService.FireAsync("Error", "No se pudo activar", SweetAlertIcon.Error);
                }
                else
                {
                    await sweetAlertService.FireAsync("Activado", "Se Activo correctamente", SweetAlertIcon.Success);
                }
            }
        }
        if (!string.IsNullOrEmpty(filtroNombre))
        {
            InstitucionLista = await servicioinstitucion.ListarPorNombre(filtroNombre, token);
            await ActualizarListaPaginada();
        }
        else
        {
            await CargarInstituciones();
        }
    }
    private async Task BuscarPorNombre(ChangeEventArgs e)
    {
        
        filtroNombre = e.Value.ToString();
        if (!string.IsNullOrEmpty(filtroNombre))
        {
            InstitucionLista = await servicioinstitucion.ListarPorNombre(filtroNombre, token);
            await ActualizarListaPaginada();
        }else
        {
            await CargarInstituciones();
            await ActualizarListaPaginada();
        }
        
    }
    private void CerrarModal()
    {
        mostrarModal = false;
    }
    private void Navegar()
    {
        nav.NavigateTo("/instituciones", forceLoad: true);
    }
}
