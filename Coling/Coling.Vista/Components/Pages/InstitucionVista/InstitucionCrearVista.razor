@page "/institucion/crear"

@inject IInstitucionService servicioInstitucion
@inject NavigationManager nav
@inject SweetAlertService sweetAlertService

<h3>Crear Institucion</h3>
<button type="button" class="btn btn-primary" @onclick="AbrirModal">
    Launch demo modal
</button>

@if (mostrarModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm EditContext="contextoEdicion" OnValidSubmit="OnValidSubmit">
                       <DataAnnotationsValidator />
                       <div class="mb-3">
                           <label>Nombre:</label>
                           <div>
                               <InputText class="form-control" @bind-Value="@institucion.Nombre"></InputText>
                               <ValidationMessage For="@(()=>institucion.Nombre)"></ValidationMessage>
                           </div>
                       </div>
                       <div class="mb-3">
                           <label>Tipo:</label>
                           <div>
                               <InputText class="form-control" @bind-Value="@institucion.Tipo"></InputText>
                               <ValidationMessage For="@(()=>institucion.Tipo)"></ValidationMessage>
                           </div>
                       </div>
                       <div class="mb-3">
                           <label>Direccion:</label>
                           <div>
                               <InputText class="form-control" @bind-Value="@institucion.Direccion"></InputText>
                               <ValidationMessage For="@(()=>institucion.Direccion)"></ValidationMessage>
                           </div>
                       </div>
                   </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Close</button>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
            </div>
        </div>
    </div>
}

<InstitucionFormulario @ref="insform" institucion="institucion" OnValidSubmit="Crear" Cancelar="Navegar"></InstitucionFormulario>

@code {
    private EditContext contextoEdicion = null!;

    [Parameter]
    [EditorRequired]
    public Institucion institucion { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    private InstitucionFormulario? insform;
    private bool mostrarModal = false;
    
    protected override void OnInitialized()
    {
        contextoEdicion = new(institucion);
    }

    private async Task Crear()
    {
        string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoiSnVhbiIsInJvbCI6IkFkbWluIiwiZXN0YWRvIjoiQWN0aXZvIiwiZXhwIjoxNzEyMjQzMTk5fQ.787Bk0kXr3Hl_F68fKyYQrYhUAMJIJTQzOiTONpP1e0";
        institucion.PartitionKey = "Educacion";
        var respuesta = await servicioInstitucion.InsertarInstitucion(institucion, token);
        if (!respuesta)
        {
            await sweetAlertService.FireAsync("Error", "No se pudo guardar", SweetAlertIcon.Error);
            return;
        }
        else
        {
            await sweetAlertService.FireAsync("Guardado", "Se guardo correctamente", SweetAlertIcon.Success);
            Navegar();
        }

    }

    private void Navegar()
    {
        insform!.formularioPostOk = true;
        nav.NavigateTo("/instituciones", forceLoad: true);
    }

    private void AbrirModal()
    {
        mostrarModal = true;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
    }
}
